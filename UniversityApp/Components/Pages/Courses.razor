@page "/courses"
@using UniversityApp.Entities
@using UniversityApp.BLL.Services.Api
@inject CourseApiService CourseService
@rendermode InteractiveServer

<h3 class="mb-4 text-primary">Manage Courses</h3>

<div class="card mb-3">
    <div class="card-body">
        <form class="row g-3" @onsubmit="HandleSubmit">
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="Course Title" @bind="NewCourse.Title" required />
            </div>
            <div class="col-md-3">
                <input type="text" class="form-control" placeholder="Course Code" @bind="NewCourse.Code" required />
            </div>
            <div class="col-md-2">
                <input type="number" class="form-control" placeholder="Credit Hours" @bind="NewCourse.CreditHours" min="1" required />
            </div>
            <div class="col-md-2 d-grid">
                <button type="submit" class="btn btn-success">@((IsEditMode ? "Update" : "Add"))</button>
            </div>
        </form>
    </div>
</div>

<table class="table table-striped">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Code</th>
            <th>Credit Hours</th>
            <th>Created At</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in courseList)
        {
                <tr>
                    <td>@course.Id</td>
                    <td>@course.Title</td>
                    <td>@course.Code</td>
                    <td>@course.CreditHours</td>
                    <td>@course.CreatedAt.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditCourse(course)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCourse(course.Id)">Delete</button>
                    </td>
                </tr>
        }
    </tbody>
</table>

@code {
    private List<Course> courseList = new();
    private Course NewCourse = new();
    private bool IsEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        courseList = await CourseService.GetCoursesAsync();
    }

    private async Task HandleSubmit()
    {
        if (IsEditMode)
        {
            await CourseService.UpdateCourseAsync(NewCourse);
        }
        else
        {
            NewCourse.CreatedAt = DateTime.Now;
            await CourseService.AddCourseAsync(NewCourse);
        }

        NewCourse = new();
        IsEditMode = false;
        await LoadCourses();
    }

    private void EditCourse(Course course)
    {
        NewCourse = new Course
            {
                Id = course.Id,
                Title = course.Title,
                Code = course.Code,
                CreditHours = course.CreditHours,
                CreatedAt = course.CreatedAt
            };
        IsEditMode = true;
    }

    private async Task DeleteCourse(int id)
    {
        await CourseService.DeleteCourseAsync(id);
        await LoadCourses();
    }
}
